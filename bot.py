#!/usr/bin/python3
# -*-coding:utf8-*-

import logging.config
from telegram.ext import CommandHandler, ConversationHandler
from telegram.ext import Updater
from telegram.ext import MessageHandler, Filters
import telegram
from db import Database
import configparser
import time
import smtplib
import locale

locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')

config = configparser.ConfigParser()
config.read('/PATH/TO/BOT/config')
db = Database(config['Database']['Path'])
logging.config.fileConfig('/PATH/TO/BOT/log_bot.conf')
log = logging.getLogger(__name__)

FEEDBACK, FLASH, OFFER, POLITIC, ECONOMY, FINANCE, BUSINESS, TECH = range(8)

# –í—Å–µ –∫–æ–Ω–æ–ø–∫–∏
# start
politic_button = telegram.KeyboardButton(text="–ü–æ–ª–∏—Ç–∏–∫–∞")
economy_button = telegram.KeyboardButton(text="–≠–∫–æ–Ω–æ–º–∏–∫–∞")
finance_button = telegram.KeyboardButton(text="–§–∏–Ω–∞–Ω—Å—ã")
business_button = telegram.KeyboardButton(text="–ë–∏–∑–Ω–µ—Å")
tech_button = telegram.KeyboardButton(text="–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –º–µ–¥–∏–∞")
option_button = telegram.KeyboardButton(text='–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
# option
source_button = telegram.KeyboardButton(text="–ò—Å—Ç–æ—á–Ω–∏–∫–∏")
rubric_button = telegram.KeyboardButton(text="–†—É–±—Ä–∏–∫–∏")
about_button = telegram.KeyboardButton(text="–û –Ω–∞—Å")
# source
rbc_button = telegram.KeyboardButton(text="–†–ë–ö")
vedomosti_button = telegram.KeyboardButton(text="–í–µ–¥–æ–º–æ—Å—Ç–∏")
kommersant_button = telegram.KeyboardButton(text="–ö–æ–º–º–µ—Ä—Å–∞–Ω—Ç")
flash_button = telegram.KeyboardButton(text="‚ö°")
offer_button = telegram.KeyboardButton(text="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–π")
# about us
write_to_us_button = telegram.KeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º")
feedback_button = telegram.KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
# cansel, back, more
back_button = telegram.KeyboardButton(text="–ù–∞–∑–∞–¥")
cansel_button = telegram.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")
more_button = telegram.KeyboardButton(text="–ï—â—ë")


# –í—Å–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# start
start_keyboard = [[politic_button, economy_button], [finance_button, business_button], [tech_button, option_button]]
start_markup = telegram.ReplyKeyboardMarkup(start_keyboard)
# option
option_keyboard = [[source_button, about_button], [back_button]]
option_markup = telegram.ReplyKeyboardMarkup(option_keyboard)
# source
source_keyboard = [[rbc_button, vedomosti_button], [kommersant_button, flash_button], [offer_button, back_button]]
source_markup = telegram.ReplyKeyboardMarkup(source_keyboard)
# about
about_keyboard = [[write_to_us_button], [back_button]]
about_markup = telegram.ReplyKeyboardMarkup(about_keyboard)
# back
back_keyboard = [[back_button]]
back_markup = telegram.ReplyKeyboardMarkup(back_keyboard)
# more
more_keyboard = [[more_button, back_button]]
more_markup = telegram.ReplyKeyboardMarkup(more_keyboard, resize_keyboard=True)
# hide
hide_markup = telegram.ReplyKeyboardHide()


# –∑–∞–ø—Ä–æ—Å—ã –≤ –±–¥
def rbc(bot, update):
    if db.get_rbc(update.message.chat.id):
        bot.sendMessage(chat_id=update.message.chat_id,
                        text='–†–ë–ö –≤—ã–∫–ª—é—á–µ–Ω',
                        reply_markup=source_markup)
    else:
        bot.sendMessage(chat_id=update.message.chat_id,
                        text='–†–ë–ö –≤–∫–ª—é—á–µ–Ω',
                        reply_markup=source_markup)


def flash(bot, update):
    if db.get_flash(update.message.chat.id, update.message.chat_id):
        bot.sendMessage(chat_id=update.message.chat_id,
                        text='–†–µ–∂–∏–º ‚ö° –≤–∫–ª—é—á–µ–Ω\n–≠—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å –æ—Å–æ–±–æ-–≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞, –ø–æ —Ä–µ—à–µ–Ω–∏—é '
                             '—Ä–µ–¥–∞–∫—Ü–∏–∏ –∏ –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π. –ú—ã –æ–±–µ—â–∞–µ–º –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å –≤–∞—Å –ø–æ '
                             '–ø—É—Å—Ç—è–∫–∞–º, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —á—Ç–æ-—Ç–æ —ç–∫—Å—Ç—Ä–∞–æ—Ä–¥–∏–Ω–∞—Ä–Ω–æ–µ',
                        reply_markup=source_markup)
    else:
        bot.sendMessage(chat_id=update.message.chat_id,
                        text='–†–µ–∂–∏–º ‚ö° –≤—ã–∫–ª—é—á–µ–Ω',
                        reply_markup=source_markup)


def vedomosti(bot, update):
    if db.get_vedomosti(update.message.chat.id):
        bot.sendMessage(chat_id=update.message.chat_id,
                        text='‚Äú–í–µ–¥–æ–º–æ—Å—Ç–∏‚Äù –≤—ã–∫–ª—é—á–µ–Ω—ã',
                        reply_markup=source_markup)
    else:
        bot.sendMessage(chat_id=update.message.chat_id,
                        text='‚Äú–í–µ–¥–æ–º–æ—Å—Ç–∏‚Äù –≤–∫–ª—é—á–µ–Ω—ã',
                        reply_markup=source_markup)


def kommersant(bot, update):
    if db.get_kommersant(update.message.chat.id):
        bot.sendMessage(chat_id=update.message.chat_id,
                        text='‚Äú–ö–æ–º–º–µ—Ä—Å–∞–Ω—Ç‚Äù –≤—ã–∫–ª—é—á–µ–Ω',
                        reply_markup=source_markup)
    else:
        bot.sendMessage(chat_id=update.message.chat_id,
                        text='‚Äú–ö–æ–º–º–µ—Ä—Å–∞–Ω—Ç‚Äù –≤–∫–ª—é—á–µ–Ω',
                        reply_markup=source_markup)


def start(bot, update):
    if db.user(update.message.chat):
        bot.sendMessage(chat_id=update.message.chat_id,
                        text='–ë–æ–ª—å—à–µ –≤–∞–º –Ω–µ–∑–∞—á–µ–º —Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –ø–æ–∏—Å–∫ –¥–µ–ª–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ —Å–∞–π—Ç–∞—Ö —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏–∑–¥–∞–Ω–∏–π. '
                             '–ú—ã –¥–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –≤–∞—à–µ–º—É —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é, –≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è, –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –¥–ª—è '
                             '–≤–∞—Å —Ç–µ–º–∞–º. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—è—Ç–∏ —Ä—É–±—Ä–∏–∫: –ü–æ–ª–∏—Ç–∏–∫–∞, –≠–∫–æ–Ω–æ–º–∏–∫–∞, –ë–∏–∑–Ω–µ—Å, –§–∏–Ω–∞–Ω—Å—ã –∏–ª–∏ IT –∏ '
                             '–ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç–∏ –†–ë–ö, ¬´–í–µ–¥–æ–º–æ—Å—Ç–µ–π¬ª –∏ ¬´–ö–æ–º–º–µ—Ä—Å–∞–Ω—Ç–∞¬ª —Å –º–æ–º–µ–Ω—Ç–∞ –≤–∞—à–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è '
                             '–∫ –±–æ—Ç—É. –ù–µ —Ç—Ä–∞—Ç—å—Ç–µ –≤—Ä–µ–º—è –Ω–∞ –ø–æ–∏—Å–∫, —á–∏—Ç–∞–π—Ç–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ç–æ–ª—å–∫–æ —Ç–µ —Å—Ç–∞—Ç—å–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º '
                             '–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã',
                        reply_markup=start_markup)
    else:
        bot.sendMessage(chat_id=update.message.chat_id,
                        text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å",
                        reply_markup=start_markup)


def prompt(prompt):
    return input(prompt).strip()


def send_email(user, text, subj):
    smtpObj = smtplib.SMTP('smtp.mail.ru', 587)
    smtpObj.starttls()
    smtpObj.login('E@MA.IL', 'PASSWORD')
    fromaddr = str(user.id) + ' ' + str(user.first_name) + ' ' + str(user.last_name) + ' ' + str(user.username) + ' ' \
               + str(user.title)
    msg = '{}\n{}\n{}'.format(fromaddr, subj, text)
    msg = msg.encode("utf8")
    smtpObj.sendmail("FROM@EMAIL", "TO@EMAIL", msg)
    smtpObj.quit()


def get_smile(site):
    if site == 'rbc.ru':
        return 'üáµ'
    if site == 'kommersant.ru':
        return 'üá∞'
    if site == 'vedomosti.ru':
        return 'üáß'


def get_msg(bot, update, news, rubric, finish=5):
    news.sort(key=(lambda obj: obj.id))
    if len(news) <= 5:
        for post in news[:len(news)]:
            bot.sendMessage(chat_id=update.message.chat_id,
                            text='<i>{3}</i>\n {1} {2} <a href="{0}">{0}</a>'.format(post.short_link,
                                                                                     get_smile(post.site),
                                                                                     post.text,
                                                                                     time.strftime("%H:%M - %d %b %Y",
                                                                                                   time.localtime(
                                                                                                       post.date))),
                            parse_mode=telegram.ParseMode.HTML,
                            disable_web_page_preview=True,
                            reply_markup=hide_markup)
        db.update_last_view(update.message.chat.id, news[len(news)-1].id, rubric)
        bot.sendMessage(chat_id=update.message.chat_id,
                        text='–î—Ä—É–≥–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç.',
                        reply_markup=start_markup)
        return ConversationHandler.END
    for post in news[:4]:
        bot.sendMessage(chat_id=update.message.chat_id,
                        text='<i>{3}</i>\n {1} {2} <a href="{0}">{0}</a>'.format(post.short_link,
                                                                                 get_smile(post.site),
                                                                                 post.text,
                                                                                 time.strftime("%H:%M - %d %b %Y",
                                                                                               time.localtime(
                                                                                                   post.date))),
                        parse_mode=telegram.ParseMode.HTML,
                        disable_web_page_preview=True,
                        reply_markup=hide_markup)
    bot.sendMessage(chat_id=update.message.chat_id,
                    text='<i>{3}</i>\n {1} {2} <a href="{0}">{0}</a>'.format(news[4].short_link,
                                                                             get_smile(news[4].site),
                                                                             news[4].text,
                                                                             time.strftime("%H:%M - %d %b %Y",
                                                                                           time.localtime(
                                                                                               news[4].date))),
                    parse_mode=telegram.ParseMode.HTML,
                    disable_web_page_preview=True,
                    reply_markup=more_markup)
    db.update_last_view(update.message.chat.id, news[finish-1].id, rubric)


def politic(bot, update):
    rubric = 'politic_view'
    news = db.get_politic(update.message.chat.id)
    if len(news) == 0:
        bot.sendMessage(chat_id=update.message.chat_id,
                        text='–ù–∏—á–µ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–∞ –Ω–µ —Å–ª—É—á–∏–ª–æ—Å—å.',
                        reply_markup=start_markup)
        return ConversationHandler.END
    if update.message.text == '–ï—â—ë':
        if len(news) > 5:
            get_msg(bot, update, news, rubric)
        if len(news) == 5:
            get_msg(bot, update, news, rubric)
            return ConversationHandler.END
        if 0 < len(news) < 5:
            get_msg(bot, update, news, rubric, len(news))
            return ConversationHandler.END
    if update.message.text == '–ù–∞–∑–∞–¥':
        bot.sendMessage(chat_id=update.message.chat_id,
                        text='–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?',
                        reply_markup=start_markup)
        return ConversationHandler.END


def economy(bot, update):
    rubric = 'economy_view'
    news = db.get_economy(update.message.chat.id)
    if len(news) == 0:
        bot.sendMessage(chat_id=update.message.chat_id,
                        text='–ù–∏—á–µ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–∞ –Ω–µ —Å–ª—É—á–∏–ª–æ—Å—å.',
                        reply_markup=start_markup)
        return ConversationHandler.END
    if update.message.text == '–ï—â—ë':
        if len(news) > 5:
            get_msg(bot, update, news, rubric)
        if len(news) == 5:
            get_msg(bot, update, news, rubric)
            return ConversationHandler.END
        if 0 < len(news) < 5:
            get_msg(bot, update, news, rubric, len(news))
            return ConversationHandler.END
    if update.message.text == '–ù–∞–∑–∞–¥':
        bot.sendMessage(chat_id=update.message.chat_id,
                        text='–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?',
                        reply_markup=start_markup)
        return ConversationHandler.END


def finance(bot, update):
    rubric = 'finance_view'
    news = db.get_finance(update.message.chat.id)
    if len(news) == 0:
        bot.sendMessage(chat_id=update.message.chat_id,
                        text='–ù–∏—á–µ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–∞ –Ω–µ —Å–ª—É—á–∏–ª–æ—Å—å.',
                        reply_markup=start_markup)
        return ConversationHandler.END
    if update.message.text == '–ï—â—ë':
        if len(news) > 5:
            get_msg(bot, update, news, rubric)
        if len(news) == 5:
            get_msg(bot, update, news, rubric)
            return ConversationHandler.END
        if 0 < len(news) < 5:
            get_msg(bot, update, news, rubric, len(news))
            return ConversationHandler.END
    if update.message.text == '–ù–∞–∑–∞–¥':
        bot.sendMessage(chat_id=update.message.chat_id,
                        text='–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?',
                        reply_markup=start_markup)
        return ConversationHandler.END


def business(bot, update):
    rubric = 'business_view'
    news = db.get_business(update.message.chat.id)
    if len(news) == 0:
        bot.sendMessage(chat_id=update.message.chat_id,
                        text='–ù–∏—á–µ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–∞ –Ω–µ —Å–ª—É—á–∏–ª–æ—Å—å.',
                        reply_markup=start_markup)
        return ConversationHandler.END
    if update.message.text == '–ï—â—ë':
        if len(news) > 5:
            get_msg(bot, update, news, rubric)
        if len(news) == 5:
            get_msg(bot, update, news, rubric)
            return ConversationHandler.END
        if 0 < len(news) < 5:
            get_msg(bot, update, news, rubric, len(news))
            return ConversationHandler.END
    if update.message.text == '–ù–∞–∑–∞–¥':
        bot.sendMessage(chat_id=update.message.chat_id,
                        text='–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?',
                        reply_markup=start_markup)
        return ConversationHandler.END


def tech(bot, update):
    rubric = 'tech_view'
    news = db.get_tech(update.message.chat.id)
    if len(news) == 0:
        bot.sendMessage(chat_id=update.message.chat_id,
                        text='–ù–∏—á–µ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–∞ –Ω–µ —Å–ª—É—á–∏–ª–æ—Å—å.',
                        reply_markup=start_markup)
        return ConversationHandler.END
    if update.message.text == '–ï—â—ë':
        if len(news) > 5:
            get_msg(bot, update, news, rubric)
        if len(news) == 5:
            get_msg(bot, update, news, rubric)
            return ConversationHandler.END
        if 0 < len(news) < 5:
            get_msg(bot, update, news, rubric, len(news))
            return ConversationHandler.END
    if update.message.text == '–ù–∞–∑–∞–¥':
        bot.sendMessage(chat_id=update.message.chat_id,
                        text='–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?',
                        reply_markup=start_markup)
        return ConversationHandler.END


def submenu(bot, update):
    if update.message.text == '–ù–∞–∑–∞–¥':
        bot.sendMessage(chat_id=update.message.chat_id,
                        text='–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?',
                        reply_markup=about_markup)
        return ConversationHandler.END
    send_email(update.message.chat, update.message.text, 'feedback')
    bot.sendMessage(chat_id=update.message.chat_id,
                    text='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤',
                    reply_markup=about_markup)
    return ConversationHandler.END


def offer(bot, update):
    if update.message.text == '–ù–∞–∑–∞–¥':
        bot.sendMessage(chat_id=update.message.chat_id,
                        text='–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?',
                        reply_markup=source_markup)
        return ConversationHandler.END
    send_email(update.message.chat, update.message.text, 'offer')
    bot.sendMessage(chat_id=update.message.chat_id,
                    text='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
                    reply_markup=source_markup)
    return ConversationHandler.END


def menu(bot, update):
    if update.message.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏':
        bot.sendMessage(chat_id=update.message.chat_id,
                        text='–°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä',
                        reply_markup=option_markup)
    if update.message.text == '–ü–æ–ª–∏—Ç–∏–∫–∞':
        rubric = 'politic_view'
        news = db.get_politic(update.message.chat.id)
        if len(news) == 5:
            get_msg(bot, update, news, rubric)
        elif 0 < len(news) < 5:
            get_msg(bot, update, news, rubric, len(news))
        elif len(news) > 5:
            get_msg(bot, update, news, rubric)
            return POLITIC
        else:
            bot.sendMessage(chat_id=update.message.chat_id,
                            text='–ù–∏—á–µ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–∞ –Ω–µ —Å–ª—É—á–∏–ª–æ—Å—å.',
                            reply_markup=start_markup)
    if update.message.text == '–≠–∫–æ–Ω–æ–º–∏–∫–∞':
        rubric = 'economy_view'
        news = db.get_economy(update.message.chat.id)
        if len(news) == 5:
            get_msg(bot, update, news, rubric)
        elif 0 < len(news) < 5:
            get_msg(bot, update, news, rubric, len(news))
        elif len(news) > 5:
            get_msg(bot, update, news, rubric)
            return ECONOMY
        else:
            bot.sendMessage(chat_id=update.message.chat_id,
                            text='–ù–∏—á–µ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–∞ –Ω–µ —Å–ª—É—á–∏–ª–æ—Å—å.',
                            reply_markup=start_markup)
    if update.message.text == '–§–∏–Ω–∞–Ω—Å—ã':
        rubric = 'finance_view'
        news = db.get_finance(update.message.chat.id)
        if len(news) == 5:
            get_msg(bot, update, news, rubric)
        elif 0 < len(news) < 5:
            get_msg(bot, update, news, rubric, len(news))
        elif len(news) > 5:
            get_msg(bot, update, news, rubric)
            return FINANCE
        else:
            bot.sendMessage(chat_id=update.message.chat_id,
                            text='–ù–∏—á–µ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–∞ –Ω–µ —Å–ª—É—á–∏–ª–æ—Å—å.',
                            reply_markup=start_markup)
    if update.message.text == '–ë–∏–∑–Ω–µ—Å':
        rubric = 'business_view'
        news = db.get_business(update.message.chat.id)
        if len(news) == 5:
            get_msg(bot, update, news, rubric)
        elif 0 < len(news) < 5:
            get_msg(bot, update, news, rubric, len(news))
        elif len(news) > 5:
            get_msg(bot, update, news, rubric)
            return BUSINESS
        else:
            bot.sendMessage(chat_id=update.message.chat_id,
                            text='–ù–∏—á–µ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–∞ –Ω–µ —Å–ª—É—á–∏–ª–æ—Å—å.',
                            reply_markup=start_markup)
    if update.message.text == '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –º–µ–¥–∏–∞':
        rubric = 'tech_view'
        news = db.get_tech(update.message.chat.id)
        if len(news) == 5:
            get_msg(bot, update, news, rubric)
        elif 0 < len(news) < 5:
            get_msg(bot, update, news, rubric, len(news))
        elif len(news) > 5:
            get_msg(bot, update, news, rubric)
            return TECH
        else:
            bot.sendMessage(chat_id=update.message.chat_id,
                            text='–ù–∏—á–µ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–∞ –Ω–µ —Å–ª—É—á–∏–ª–æ—Å—å.',
                            reply_markup=start_markup)
    if update.message.text == '–ò—Å—Ç–æ—á–Ω–∏–∫–∏':
        bot.sendMessage(chat_id=update.message.chat_id,
                        text='–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –≤–∫–ª—é—á–∏—Ç—å –∏—Ö –≤–Ω–æ–≤—å',
                        reply_markup=source_markup)
    if update.message.text == '–†–ë–ö':
        rbc(bot, update)
    if update.message.text == '–í–µ–¥–æ–º–æ—Å—Ç–∏':
        vedomosti(bot, update)
    if update.message.text == '–ö–æ–º–º–µ—Ä—Å–∞–Ω—Ç':
        kommersant(bot, update)
    if update.message.text == '‚ö°':
        flash(bot, update)
    if update.message.text == '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–π':
        bot.sendMessage(chat_id=update.message.chat_id,
                        text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                        reply_markup=back_markup)
        return OFFER
    if update.message.text == '–û –Ω–∞—Å':
        bot.sendMessage(chat_id=update.message.chat_id,
                        text='–ë–æ–ª—å—à–µ –≤–∞–º –Ω–µ–∑–∞—á–µ–º —Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –ø–æ–∏—Å–∫ –¥–µ–ª–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ —Å–∞–π—Ç–∞—Ö —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏–∑–¥–∞–Ω–∏–π. '
                             '–ú—ã –¥–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –≤–∞—à–µ–º—É —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é, –≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è, –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –¥–ª—è '
                             '–≤–∞—Å —Ç–µ–º–∞–º. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—è—Ç–∏ —Ä—É–±—Ä–∏–∫: –ü–æ–ª–∏—Ç–∏–∫–∞, –≠–∫–æ–Ω–æ–º–∏–∫–∞, –ë–∏–∑–Ω–µ—Å, –§–∏–Ω–∞–Ω—Å—ã –∏–ª–∏ IT –∏ '
                             '–ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç–∏ –†–ë–ö, ¬´–í–µ–¥–æ–º–æ—Å—Ç–µ–π¬ª –∏ ¬´–ö–æ–º–º–µ—Ä—Å–∞–Ω—Ç–∞¬ª —Å –º–æ–º–µ–Ω—Ç–∞ –≤–∞—à–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è '
                             '–∫ –±–æ—Ç—É. –ù–µ —Ç—Ä–∞—Ç—å—Ç–µ –≤—Ä–µ–º—è –Ω–∞ –ø–æ–∏—Å–∫, —á–∏—Ç–∞–π—Ç–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ç–æ–ª—å–∫–æ —Ç–µ —Å—Ç–∞—Ç—å–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º '
                             '–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã',
                        reply_markup=about_markup)
    if update.message.text == '–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º':
        bot.sendMessage(chat_id=update.message.chat_id,
                        text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                        reply_markup=back_markup)
        return FEEDBACK
    if update.message.text == '–ú–æ–ª–Ω–∏—è':
        if db.get_user_from_id(update.message.chat.id).acess:
            bot.sendMessage(chat_id=update.message.chat_id,
                            text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ /cancel',
                            reply_markup=start_markup)
            return FLASH
    if update.message.text == '–ù–∞–∑–∞–¥':
        bot.sendMessage(chat_id=update.message.chat_id,
                        text='–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?',
                        reply_markup=start_markup)
    if update.message.text == '–û—Ç–º–µ–Ω–∞':
        bot.sendMessage(chat_id=update.message.chat_id,
                        text='–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?',
                        reply_markup=option_markup)


def cancel(bot, update):
    user = update.message.from_user
    log.info("User {} canceled the conversation.".format(user.first_name))
    update.message.reply_text('–û—Ç–º–µ–Ω–∞',
                              reply_markup=source_markup)
    return ConversationHandler.END


def hide(bot, update):
    bot.sendMessage(chat_id=update.message.chat_id, text="I'm back.", reply_markup=hide_markup)


def do_flash(bot, update):
    try:
        send_flash(bot, update, update.message.text)
        update.message.reply_text('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    except Exception as err:
        logging.error(err)
        update.message.reply_text('–æ—à–∏–±–∫–∞')
    return ConversationHandler.END


def send_flash(bot, update, text):
    users = db.get_add_flash_users()
    msg = ''
    for user in users:
        try:
            bot.sendMessage(chat_id=user.flash, text='‚ö° '+text, disable_web_page_preview=True, reply_markup=start_markup)
        except:
            msg = str(user.flash) + ' ' + user.first_name + ' ' + user.last_name + ' ' + user.username + '\n'
            continue
    if msg != '':
        log.error(msg)


def unknown(bot, update):
    bot.sendMessage(chat_id=update.message.chat_id, text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç.", reply_markup=start_markup)


def main():
    updater = Updater(token=config['Telegram']['access_token'])

    dp = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(Filters.text, menu)],

        states={
            FEEDBACK: [MessageHandler(Filters.text, submenu)],
            FLASH:  [MessageHandler(Filters.text, do_flash)],
            OFFER: [MessageHandler(Filters.text, offer)],
            POLITIC: [MessageHandler(Filters.text, politic)],
            ECONOMY: [MessageHandler(Filters.text, economy)],
            FINANCE: [MessageHandler(Filters.text, finance)],
            BUSINESS: [MessageHandler(Filters.text, business)],
            TECH: [MessageHandler(Filters.text, tech)]
        },

        fallbacks=[CommandHandler('cancel', cancel)]
    )
    dp.add_handler(conv_handler)

    keyboard_handler = CommandHandler('start', start)
    dp.add_handler(keyboard_handler)

    menu_handler = MessageHandler(Filters.text, menu)
    dp.add_handler(menu_handler)

    hide_handler = CommandHandler('hide', hide)
    dp.add_handler(hide_handler)

    cancel_handler = CommandHandler('cancel', cancel)
    dp.add_handler(cancel_handler)

    unknown_handler = MessageHandler(Filters.command, unknown)
    dp.add_handler(unknown_handler)

    # Start the Bot
    updater.start_polling()

    # Run the bot until the you presses Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT. This should be used most of the time, since
    # start_polling() is non-blocking and will stop the bot gracefully.
    updater.idle()


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        log.critical(e)

